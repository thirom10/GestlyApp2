<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/gestlyapp/ui/feactures/register/RegisterScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/gestlyapp/ui/feactures/register/RegisterScreen.kt" />
              <option name="originalContent" value="package com.example.gestlyapp.ui.feactures.register&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.text.KeyboardActions&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Check&#10;import androidx.compose.material.icons.filled.Close&#10;import androidx.compose.animation.*&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.focus.FocusDirection&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalFocusManager&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;&#10;private val RegisterUiState.successMessage: String?&#10;    get() = if (isRegistrationSuccessful) &quot;¡Registro exitoso!&quot; else null&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun RegisterScreen(&#10;    viewModel: RegisterViewModel = viewModel(),&#10;    onNavigateBack: () -&gt; Unit = {},&#10;    onNavigateToLogin: () -&gt; Unit = {},&#10;    onRegistrationSuccess: () -&gt; Unit = {}&#10;) {&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;    val focusManager = LocalFocusManager.current&#10;    val scrollState = rememberScrollState()&#10;    val snackbarHostState = remember { SnackbarHostState() }&#10;    &#10;    // Manejar el éxito del registro&#10;    LaunchedEffect(uiState.isRegistrationSuccessful) {&#10;        if (uiState.isRegistrationSuccessful) {&#10;            snackbarHostState.showSnackbar(&#10;                message = &quot;¡Registro exitoso! Redirigiendo al login...&quot;,&#10;                duration = SnackbarDuration.Short&#10;            )&#10;            kotlinx.coroutines.delay(10) // Esperar un poco para que se vea la notificación&#10;            onRegistrationSuccess()&#10;            viewModel.resetRegistrationSuccess()&#10;        }&#10;    }&#10;    &#10;    // Colores consistentes con la app&#10;    val backgroundColor = Color(0xFF2C2C2C)&#10;    val primaryBlue = Color(0xFF007AFF)&#10;    val textFieldBackground = Color(0xFF3C3C3C)&#10;    val textColor = Color.White&#10;    val hintColor = Color(0xFF8E8E93)&#10;    val cardBackground = Color(0xFF1C1C1E)&#10;    &#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        Scaffold(&#10;            containerColor = backgroundColor&#10;        ) { paddingValues -&gt;&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .windowInsetsPadding(WindowInsets.systemBars)&#10;        ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .verticalScroll(scrollState)&#10;        ) {&#10;            // Header con botón de regreso y título&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(horizontal = 16.dp, vertical = 12.dp),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                IconButton(&#10;                    onClick = onNavigateBack,&#10;                    modifier = Modifier.size(40.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                        contentDescription = &quot;Volver&quot;,&#10;                        tint = primaryBlue,&#10;                        modifier = Modifier.size(24.dp)&#10;                    )&#10;                }&#10;                &#10;                Spacer(modifier = Modifier.weight(1f))&#10;                &#10;                Text(&#10;                    text = &quot;Gestly&quot;,&#10;                    fontSize = 20.sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = textColor&#10;                )&#10;                &#10;                Spacer(modifier = Modifier.weight(1f))&#10;                &#10;                // Espacio para mantener el título centrado&#10;                Spacer(modifier = Modifier.size(40.dp))&#10;            }&#10;            &#10;            // Precio destacado&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(horizontal = 32.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = &quot;5,000 ARS&quot;,&#10;                    fontSize = 42.sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = primaryBlue&#10;                )&#10;                Text(&#10;                    text = &quot;/ mes&quot;,&#10;                    fontSize = 16.sp,&#10;                    color = hintColor&#10;                )&#10;            }&#10;            &#10;            Spacer(modifier = Modifier.height(24.dp))&#10;            &#10;            // Título principal&#10;            Text(&#10;                text = &quot;Libera el Potencial de tu Negocio&quot;,&#10;                fontSize = 28.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = textColor,&#10;                textAlign = TextAlign.Center,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(horizontal = 32.dp)&#10;            )&#10;            &#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            &#10;            // Descripción scrolleable&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(200.dp)&#10;                    .padding(horizontal = 32.dp),&#10;                colors = CardDefaults.cardColors(containerColor = cardBackground),&#10;                shape = RoundedCornerShape(12.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .padding(16.dp)&#10;                        .verticalScroll(rememberScrollState())&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\n&quot; +&#10;                                &quot;Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt.&quot;,&#10;                        fontSize = 14.sp,&#10;                        color = hintColor,&#10;                        lineHeight = 20.sp&#10;                    )&#10;                }&#10;            }&#10;            &#10;            Spacer(modifier = Modifier.height(24.dp))&#10;            &#10;            // Lista de características&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(horizontal = 32.dp)&#10;            ) {&#10;                FeatureItem(&#10;                    text = &quot;Gestión integral de inventario.&quot;,&#10;                    primaryBlue = primaryBlue,&#10;                    textColor = textColor&#10;                )&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;                FeatureItem(&#10;                    text = &quot;Seguimiento de ventas y análisis en tiempo real.&quot;,&#10;                    primaryBlue = primaryBlue,&#10;                    textColor = textColor&#10;                )&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;                FeatureItem(&#10;                    text = &quot;Potentes herramientas de reportes para decisiones informadas.&quot;,&#10;                    primaryBlue = primaryBlue,&#10;                    textColor = textColor&#10;                )&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;                FeatureItem(&#10;                    text = &quot;Escalable para negocios de todos los tamaños.&quot;,&#10;                    primaryBlue = primaryBlue,&#10;                    textColor = textColor&#10;                )&#10;            }&#10;            &#10;            Spacer(modifier = Modifier.height(32.dp))&#10;            &#10;            // Formulario de registro&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(horizontal = 32.dp)&#10;            ) {&#10;                // Campo Nombre completo&#10;                OutlinedTextField(&#10;                    value = uiState.fullName,&#10;                    onValueChange = viewModel::updateFullName,&#10;                    placeholder = {&#10;                        Text(&#10;                            text = &quot;Nombre completo&quot;,&#10;                            color = hintColor&#10;                        )&#10;                    },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(56.dp),&#10;                    colors = OutlinedTextFieldDefaults.colors(&#10;                        focusedTextColor = textColor,&#10;                        unfocusedTextColor = textColor,&#10;                        focusedContainerColor = textFieldBackground,&#10;                        unfocusedContainerColor = textFieldBackground,&#10;                        focusedBorderColor = Color.Transparent,&#10;                        unfocusedBorderColor = Color.Transparent,&#10;                        cursorColor = primaryBlue&#10;                    ),&#10;                    shape = RoundedCornerShape(12.dp),&#10;                    keyboardOptions = KeyboardOptions(&#10;                        keyboardType = KeyboardType.Text,&#10;                        imeAction = ImeAction.Next&#10;                    ),&#10;                    keyboardActions = KeyboardActions(&#10;                        onNext = { focusManager.moveFocus(FocusDirection.Down) }&#10;                    ),&#10;                    singleLine = true&#10;                )&#10;                &#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                &#10;                // Campo Email&#10;                OutlinedTextField(&#10;                    value = uiState.email,&#10;                    onValueChange = viewModel::updateEmail,&#10;                    placeholder = {&#10;                        Text(&#10;                            text = &quot;Email&quot;,&#10;                            color = hintColor&#10;                        )&#10;                    },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(56.dp),&#10;                    colors = OutlinedTextFieldDefaults.colors(&#10;                        focusedTextColor = textColor,&#10;                        unfocusedTextColor = textColor,&#10;                        focusedContainerColor = textFieldBackground,&#10;                        unfocusedContainerColor = textFieldBackground,&#10;                        focusedBorderColor = Color.Transparent,&#10;                        unfocusedBorderColor = Color.Transparent,&#10;                        cursorColor = primaryBlue&#10;                    ),&#10;                    shape = RoundedCornerShape(12.dp),&#10;                    keyboardOptions = KeyboardOptions(&#10;                        keyboardType = KeyboardType.Email,&#10;                        imeAction = ImeAction.Next&#10;                    ),&#10;                    keyboardActions = KeyboardActions(&#10;                        onNext = { focusManager.moveFocus(FocusDirection.Down) }&#10;                    ),&#10;                    singleLine = true&#10;                )&#10;                &#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                &#10;                // Campo Contraseña&#10;                OutlinedTextField(&#10;                    value = uiState.password,&#10;                    onValueChange = viewModel::updatePassword,&#10;                    placeholder = {&#10;                        Text(&#10;                            text = &quot;Contraseña&quot;,&#10;                            color = hintColor&#10;                        )&#10;                    },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(56.dp),&#10;                    colors = OutlinedTextFieldDefaults.colors(&#10;                        focusedTextColor = textColor,&#10;                        unfocusedTextColor = textColor,&#10;                        focusedContainerColor = textFieldBackground,&#10;                        unfocusedContainerColor = textFieldBackground,&#10;                        focusedBorderColor = Color.Transparent,&#10;                        unfocusedBorderColor = Color.Transparent,&#10;                        cursorColor = primaryBlue&#10;                    ),&#10;                    shape = RoundedCornerShape(12.dp),&#10;                    visualTransformation = PasswordVisualTransformation(),&#10;                    keyboardOptions = KeyboardOptions(&#10;                        keyboardType = KeyboardType.Password,&#10;                        imeAction = ImeAction.Next&#10;                    ),&#10;                    keyboardActions = KeyboardActions(&#10;                        onNext = { focusManager.moveFocus(FocusDirection.Down) }&#10;                    ),&#10;                    singleLine = true&#10;                )&#10;                &#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                &#10;                // Campo Confirmar contraseña&#10;                OutlinedTextField(&#10;                    value = uiState.confirmPassword,&#10;                    onValueChange = viewModel::updateConfirmPassword,&#10;                    placeholder = {&#10;                        Text(&#10;                            text = &quot;Confirmar contraseña&quot;,&#10;                            color = hintColor&#10;                        )&#10;                    },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(56.dp),&#10;                    colors = OutlinedTextFieldDefaults.colors(&#10;                        focusedTextColor = textColor,&#10;                        unfocusedTextColor = textColor,&#10;                        focusedContainerColor = textFieldBackground,&#10;                        unfocusedContainerColor = textFieldBackground,&#10;                        focusedBorderColor = Color.Transparent,&#10;                        unfocusedBorderColor = Color.Transparent,&#10;                        cursorColor = primaryBlue&#10;                    ),&#10;                    shape = RoundedCornerShape(12.dp),&#10;                    visualTransformation = PasswordVisualTransformation(),&#10;                    keyboardOptions = KeyboardOptions(&#10;                        keyboardType = KeyboardType.Password,&#10;                        imeAction = ImeAction.Done&#10;                    ),&#10;                    keyboardActions = KeyboardActions(&#10;                        onDone = { &#10;                            focusManager.clearFocus()&#10;                            if (uiState.isFormValid) {&#10;                                viewModel.register()&#10;                            }&#10;                        }&#10;                    ),&#10;                    singleLine = true&#10;                )&#10;                &#10;                Spacer(modifier = Modifier.height(32.dp))&#10;                &#10;                // Botón Suscribirse Ahora&#10;                Button(&#10;                    onClick = { viewModel.register() },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(56.dp),&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        containerColor = if (uiState.isFormValid) primaryBlue else hintColor,&#10;                        contentColor = Color.White&#10;                    ),&#10;                    shape = RoundedCornerShape(12.dp),&#10;                    enabled = uiState.isFormValid &amp;&amp; !uiState.isLoading&#10;                ) {&#10;                    if (uiState.isLoading) {&#10;                        CircularProgressIndicator(&#10;                            modifier = Modifier.size(20.dp),&#10;                            color = Color.White,&#10;                            strokeWidth = 2.dp&#10;                        )&#10;                    } else {&#10;                        Text(&#10;                            text = &quot;Suscribirse Ahora&quot;,&#10;                            fontSize = 16.sp,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;                    }&#10;                }&#10;                &#10;                Spacer(modifier = Modifier.height(24.dp))&#10;                &#10;                // Texto de login&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.Center,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = &quot;¿Ya tienes cuenta? &quot;,&#10;                        color = hintColor,&#10;                        fontSize = 14.sp&#10;                    )&#10;                    TextButton(&#10;                        onClick = onNavigateToLogin,&#10;                        contentPadding = PaddingValues(0.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Iniciar Sesión&quot;,&#10;                            color = primaryBlue,&#10;                            fontSize = 14.sp,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;                    }&#10;                }&#10;                &#10;                Spacer(modifier = Modifier.height(40.dp))&#10;            }&#10;            }&#10;            &#10;            // Mostrar error si existe&#10;            uiState.errorMessage?.let { error -&gt;&#10;                LaunchedEffect(error) {&#10;                    kotlinx.coroutines.delay(3000)&#10;                    viewModel.clearError()&#10;                }&#10;            }&#10;        }&#10;        &#10;        // Notificación personalizada arriba de todo&#10;        AnimatedVisibility(&#10;            visible = uiState.errorMessage != null || uiState.successMessage != null,&#10;            enter = slideInVertically(&#10;                initialOffsetY = { -it },&#10;                animationSpec = tween(300)&#10;            ) + fadeIn(animationSpec = tween(300)),&#10;            exit = slideOutVertically(&#10;                targetOffsetY = { -it },&#10;                animationSpec = tween(300)&#10;            ) + fadeOut(animationSpec = tween(300)),&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .align(Alignment.TopCenter)&#10;                .padding(top = 40.dp, start = 16.dp, end = 16.dp)&#10;        ) {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = if (uiState.errorMessage != null) Color.Red else primaryBlue&#10;                ),&#10;                shape = RoundedCornerShape(16.dp),&#10;                elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(16.dp),&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Icon(&#10;                        imageVector = if (uiState.errorMessage != null) Icons.Default.Close else Icons.Default.Check,&#10;                        contentDescription = null,&#10;                        tint = Color.White,&#10;                        modifier = Modifier.size(24.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.width(12.dp))&#10;                    Text(&#10;                        text = uiState.errorMessage ?: uiState.successMessage ?: &quot;&quot;,&#10;                        color = Color.White,&#10;                        fontSize = 16.sp,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FeatureItem(&#10;    text: String,&#10;    primaryBlue: Color,&#10;    textColor: Color&#10;) {&#10;    Row(&#10;        verticalAlignment = Alignment.Top,&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Icon(&#10;            imageVector = Icons.Default.Check,&#10;            contentDescription = null,&#10;            tint = primaryBlue,&#10;            modifier = Modifier&#10;                .size(20.dp)&#10;                .padding(top = 2.dp)&#10;        )&#10;        Spacer(modifier = Modifier.width(12.dp))&#10;        Text(&#10;            text = text,&#10;            fontSize = 16.sp,&#10;            color = textColor,&#10;            lineHeight = 22.sp,&#10;            modifier = Modifier.weight(1f)&#10;        )&#10;    }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.gestlyapp.ui.feactures.register&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.text.KeyboardActions&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Check&#10;import androidx.compose.material.icons.filled.Close&#10;import androidx.compose.animation.*&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.focus.FocusDirection&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalFocusManager&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;&#10;@Composable&#10;internal fun FeatureItemComponent(&#10;    text: String,&#10;    primaryBlue: Color,&#10;    textColor: Color&#10;) {&#10;    Row(&#10;        verticalAlignment = Alignment.Top,&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Icon(&#10;            imageVector = Icons.Default.Check,&#10;            contentDescription = null,&#10;            tint = primaryBlue,&#10;            modifier = Modifier&#10;                .size(20.dp)&#10;                .padding(top = 2.dp)&#10;        )&#10;        Spacer(modifier = Modifier.width(12.dp))&#10;        Text(&#10;            text = text,&#10;            fontSize = 16.sp,&#10;            color = textColor,&#10;            lineHeight = 22.sp,&#10;            modifier = Modifier.weight(1f)&#10;        )&#10;    }&#10;}&#10;&#10;private val RegisterUiState.successMessage: String?&#10;    get() = if (isRegistrationSuccessful) &quot;¡Registro exitoso!&quot; else null&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun RegisterScreen(&#10;    viewModel: RegisterViewModel = viewModel(),&#10;    onNavigateBack: () -&gt; Unit = {},&#10;    onNavigateToLogin: () -&gt; Unit = {},&#10;    onRegistrationSuccess: () -&gt; Unit = {}&#10;) {&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;    val focusManager = LocalFocusManager.current&#10;    val scrollState = rememberScrollState()&#10;    val snackbarHostState = remember { SnackbarHostState() }&#10;    &#10;    // Manejar el éxito del registro&#10;    LaunchedEffect(uiState.isRegistrationSuccessful) {&#10;        if (uiState.isRegistrationSuccessful) {&#10;            snackbarHostState.showSnackbar(&#10;                message = &quot;¡Registro exitoso! Redirigiendo al login...&quot;,&#10;                duration = SnackbarDuration.Short&#10;            )&#10;            kotlinx.coroutines.delay(10) // Esperar un poco para que se vea la notificación&#10;            onRegistrationSuccess()&#10;            viewModel.resetRegistrationSuccess()&#10;        }&#10;    }&#10;    &#10;    // Colores consistentes con la app&#10;    val backgroundColor = Color(0xFF2C2C2C)&#10;    val primaryBlue = Color(0xFF007AFF)&#10;    val textFieldBackground = Color(0xFF3C3C3C)&#10;    val textColor = Color.White&#10;    val hintColor = Color(0xFF8E8E93)&#10;    val cardBackground = Color(0xFF1C1C1E)&#10;    &#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        Scaffold(&#10;            containerColor = backgroundColor&#10;        ) { paddingValues -&gt;&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .windowInsetsPadding(WindowInsets.systemBars)&#10;        ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .verticalScroll(scrollState)&#10;        ) {&#10;            // Header con botón de regreso y título&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(horizontal = 16.dp, vertical = 12.dp),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                IconButton(&#10;                    onClick = onNavigateBack,&#10;                    modifier = Modifier.size(40.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                        contentDescription = &quot;Volver&quot;,&#10;                        tint = primaryBlue,&#10;                        modifier = Modifier.size(24.dp)&#10;                    )&#10;                }&#10;                &#10;                Spacer(modifier = Modifier.weight(1f))&#10;                &#10;                Text(&#10;                    text = &quot;Gestly&quot;,&#10;                    fontSize = 20.sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = textColor&#10;                )&#10;                &#10;                Spacer(modifier = Modifier.weight(1f))&#10;                &#10;                // Espacio para mantener el título centrado&#10;                Spacer(modifier = Modifier.size(40.dp))&#10;            }&#10;            &#10;            // Precio destacado&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(horizontal = 32.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = &quot;5,000 ARS&quot;,&#10;                    fontSize = 42.sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = primaryBlue&#10;                )&#10;                Text(&#10;                    text = &quot;/ mes&quot;,&#10;                    fontSize = 16.sp,&#10;                    color = hintColor&#10;                )&#10;            }&#10;            &#10;            Spacer(modifier = Modifier.height(24.dp))&#10;            &#10;            // Título principal&#10;            Text(&#10;                text = &quot;Libera el Potencial de tu Negocio&quot;,&#10;                fontSize = 28.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = textColor,&#10;                textAlign = TextAlign.Center,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(horizontal = 32.dp)&#10;            )&#10;            &#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            &#10;            // Descripción scrolleable&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(200.dp)&#10;                    .padding(horizontal = 32.dp),&#10;                colors = CardDefaults.cardColors(containerColor = cardBackground),&#10;                shape = RoundedCornerShape(12.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .padding(16.dp)&#10;                        .verticalScroll(rememberScrollState())&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\n&quot; +&#10;                                &quot;Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt.&quot;,&#10;                        fontSize = 14.sp,&#10;                        color = hintColor,&#10;                        lineHeight = 20.sp&#10;                    )&#10;                }&#10;            }&#10;            &#10;            Spacer(modifier = Modifier.height(24.dp))&#10;            &#10;            // Lista de características&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(horizontal = 32.dp)&#10;            ) {&#10;                FeatureItemComponent(&#10;                    text = &quot;Gestión integral de inventario.&quot;,&#10;                    primaryBlue = primaryBlue,&#10;                    textColor = textColor&#10;                )&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;                FeatureItemComponent(&#10;                    text = &quot;Seguimiento de ventas y análisis en tiempo real.&quot;,&#10;                    primaryBlue = primaryBlue,&#10;                    textColor = textColor&#10;                )&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;                FeatureItemComponent(&#10;                    text = &quot;Potentes herramientas de reportes para decisiones informadas.&quot;,&#10;                    primaryBlue = primaryBlue,&#10;                    textColor = textColor&#10;                )&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;                FeatureItemComponent(&#10;                    text = &quot;Escalable para negocios de todos los tamaños.&quot;,&#10;                    primaryBlue = primaryBlue,&#10;                    textColor = textColor&#10;                )&#10;            }&#10;            &#10;            Spacer(modifier = Modifier.height(32.dp))&#10;            &#10;            // Formulario de registro&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(horizontal = 32.dp)&#10;            ) {&#10;                // Campo Nombre completo&#10;                OutlinedTextField(&#10;                    value = uiState.fullName,&#10;                    onValueChange = viewModel::updateFullName,&#10;                    placeholder = {&#10;                        Text(&#10;                            text = &quot;Nombre completo&quot;,&#10;                            color = hintColor&#10;                        )&#10;                    },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(56.dp),&#10;                    colors = OutlinedTextFieldDefaults.colors(&#10;                        focusedTextColor = textColor,&#10;                        unfocusedTextColor = textColor,&#10;                        focusedContainerColor = textFieldBackground,&#10;                        unfocusedContainerColor = textFieldBackground,&#10;                        focusedBorderColor = Color.Transparent,&#10;                        unfocusedBorderColor = Color.Transparent,&#10;                        cursorColor = primaryBlue&#10;                    ),&#10;                    shape = RoundedCornerShape(12.dp),&#10;                    keyboardOptions = KeyboardOptions(&#10;                        keyboardType = KeyboardType.Text,&#10;                        imeAction = ImeAction.Next&#10;                    ),&#10;                    keyboardActions = KeyboardActions(&#10;                        onNext = { focusManager.moveFocus(FocusDirection.Down) }&#10;                    ),&#10;                    singleLine = true&#10;                )&#10;                &#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                &#10;                // Campo Email&#10;                OutlinedTextField(&#10;                    value = uiState.email,&#10;                    onValueChange = viewModel::updateEmail,&#10;                    placeholder = {&#10;                        Text(&#10;                            text = &quot;Email&quot;,&#10;                            color = hintColor&#10;                        )&#10;                    },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(56.dp),&#10;                    colors = OutlinedTextFieldDefaults.colors(&#10;                        focusedTextColor = textColor,&#10;                        unfocusedTextColor = textColor,&#10;                        focusedContainerColor = textFieldBackground,&#10;                        unfocusedContainerColor = textFieldBackground,&#10;                        focusedBorderColor = Color.Transparent,&#10;                        unfocusedBorderColor = Color.Transparent,&#10;                        cursorColor = primaryBlue&#10;                    ),&#10;                    shape = RoundedCornerShape(12.dp),&#10;                    keyboardOptions = KeyboardOptions(&#10;                        keyboardType = KeyboardType.Email,&#10;                        imeAction = ImeAction.Next&#10;                    ),&#10;                    keyboardActions = KeyboardActions(&#10;                        onNext = { focusManager.moveFocus(FocusDirection.Down) }&#10;                    ),&#10;                    singleLine = true&#10;                )&#10;                &#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                &#10;                // Campo Contraseña&#10;                OutlinedTextField(&#10;                    value = uiState.password,&#10;                    onValueChange = viewModel::updatePassword,&#10;                    placeholder = {&#10;                        Text(&#10;                            text = &quot;Contraseña&quot;,&#10;                            color = hintColor&#10;                        )&#10;                    },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(56.dp),&#10;                    colors = OutlinedTextFieldDefaults.colors(&#10;                        focusedTextColor = textColor,&#10;                        unfocusedTextColor = textColor,&#10;                        focusedContainerColor = textFieldBackground,&#10;                        unfocusedContainerColor = textFieldBackground,&#10;                        focusedBorderColor = Color.Transparent,&#10;                        unfocusedBorderColor = Color.Transparent,&#10;                        cursorColor = primaryBlue&#10;                    ),&#10;                    shape = RoundedCornerShape(12.dp),&#10;                    visualTransformation = PasswordVisualTransformation(),&#10;                    keyboardOptions = KeyboardOptions(&#10;                        keyboardType = KeyboardType.Password,&#10;                        imeAction = ImeAction.Next&#10;                    ),&#10;                    keyboardActions = KeyboardActions(&#10;                        onNext = { focusManager.moveFocus(FocusDirection.Down) }&#10;                    ),&#10;                    singleLine = true&#10;                )&#10;                &#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                &#10;                // Campo Confirmar contraseña&#10;                OutlinedTextField(&#10;                    value = uiState.confirmPassword,&#10;                    onValueChange = viewModel::updateConfirmPassword,&#10;                    placeholder = {&#10;                        Text(&#10;                            text = &quot;Confirmar contraseña&quot;,&#10;                            color = hintColor&#10;                        )&#10;                    },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(56.dp),&#10;                    colors = OutlinedTextFieldDefaults.colors(&#10;                        focusedTextColor = textColor,&#10;                        unfocusedTextColor = textColor,&#10;                        focusedContainerColor = textFieldBackground,&#10;                        unfocusedContainerColor = textFieldBackground,&#10;                        focusedBorderColor = Color.Transparent,&#10;                        unfocusedBorderColor = Color.Transparent,&#10;                        cursorColor = primaryBlue&#10;                    ),&#10;                    shape = RoundedCornerShape(12.dp),&#10;                    visualTransformation = PasswordVisualTransformation(),&#10;                    keyboardOptions = KeyboardOptions(&#10;                        keyboardType = KeyboardType.Password,&#10;                        imeAction = ImeAction.Done&#10;                    ),&#10;                    keyboardActions = KeyboardActions(&#10;                        onDone = { &#10;                            focusManager.clearFocus()&#10;                            if (uiState.isFormValid) {&#10;                                viewModel.register()&#10;                            }&#10;                        }&#10;                    ),&#10;                    singleLine = true&#10;                )&#10;                &#10;                Spacer(modifier = Modifier.height(32.dp))&#10;                &#10;                // Botón Suscribirse Ahora&#10;                Button(&#10;                    onClick = { viewModel.register() },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(56.dp),&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        containerColor = if (uiState.isFormValid) primaryBlue else hintColor,&#10;                        contentColor = Color.White&#10;                    ),&#10;                    shape = RoundedCornerShape(12.dp),&#10;                    enabled = uiState.isFormValid &amp;&amp; !uiState.isLoading&#10;                ) {&#10;                    if (uiState.isLoading) {&#10;                        CircularProgressIndicator(&#10;                            modifier = Modifier.size(20.dp),&#10;                            color = Color.White,&#10;                            strokeWidth = 2.dp&#10;                        )&#10;                    } else {&#10;                        Text(&#10;                            text = &quot;Suscribirse Ahora&quot;,&#10;                            fontSize = 16.sp,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;                    }&#10;                }&#10;                &#10;                Spacer(modifier = Modifier.height(24.dp))&#10;                &#10;                // Texto de login&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.Center,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = &quot;¿Ya tienes cuenta? &quot;,&#10;                        color = hintColor,&#10;                        fontSize = 14.sp&#10;                    )&#10;                    TextButton(&#10;                        onClick = onNavigateToLogin,&#10;                        contentPadding = PaddingValues(0.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Iniciar Sesión&quot;,&#10;                            color = primaryBlue,&#10;                            fontSize = 14.sp,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;                    }&#10;                }&#10;                &#10;                Spacer(modifier = Modifier.height(40.dp))&#10;            }&#10;            }&#10;            &#10;            // Mostrar error si existe&#10;            uiState.errorMessage?.let { error -&gt;&#10;                LaunchedEffect(error) {&#10;                    kotlinx.coroutines.delay(3000)&#10;                    viewModel.clearError()&#10;                }&#10;            }&#10;        }&#10;        &#10;        // Notificación personalizada arriba de todo&#10;        AnimatedVisibility(&#10;            visible = uiState.errorMessage != null || uiState.successMessage != null,&#10;            enter = slideInVertically(&#10;                initialOffsetY = { -it },&#10;                animationSpec = tween(300)&#10;            ) + fadeIn(animationSpec = tween(300)),&#10;            exit = slideOutVertically(&#10;                targetOffsetY = { -it },&#10;                animationSpec = tween(300)&#10;            ) + fadeOut(animationSpec = tween(300)),&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .align(Alignment.TopCenter)&#10;                .padding(top = 40.dp, start = 16.dp, end = 16.dp)&#10;        ) {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = if (uiState.errorMessage != null) Color.Red else primaryBlue&#10;                ),&#10;                shape = RoundedCornerShape(16.dp),&#10;                elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(16.dp),&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Icon(&#10;                        imageVector = if (uiState.errorMessage != null) Icons.Default.Close else Icons.Default.Check,&#10;                        contentDescription = null,&#10;                        tint = Color.White,&#10;                        modifier = Modifier.size(24.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.width(12.dp))&#10;                    Text(&#10;                        text = uiState.errorMessage ?: uiState.successMessage ?: &quot;&quot;,&#10;                        color = Color.White,&#10;                        fontSize = 16.sp,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/gestlyapp/ui/feactures/register/components/FeatureItem.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/gestlyapp/ui/feactures/register/components/FeatureItem.kt" />
              <option name="updatedContent" value="package com.example.gestlyapp.ui.feactures.register.components&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Check&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;&#10;@Composable&#10;fun FeatureItem(&#10;    text: String,&#10;    primaryBlue: Color,&#10;    textColor: Color&#10;) {&#10;    Row(&#10;        verticalAlignment = Alignment.Top,&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Icon(&#10;            imageVector = Icons.Default.Check,&#10;            contentDescription = null,&#10;            tint = primaryBlue,&#10;            modifier = Modifier&#10;                .size(20.dp)&#10;                .padding(top = 2.dp)&#10;        )&#10;        Spacer(modifier = Modifier.width(12.dp))&#10;        Text(&#10;            text = text,&#10;            fontSize = 16.sp,&#10;            color = textColor,&#10;            lineHeight = 22.sp,&#10;            modifier = Modifier.weight(1f)&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>